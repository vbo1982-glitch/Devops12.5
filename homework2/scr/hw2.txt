Архітектура Linux і роль компонентів у роботі DevOps-інженера

a) Kernel (Ядро)

Ядро — це головна частина операційної системи Linux. Воно керує апаратними ресурсами та забезпечує взаємодію між апаратним забезпеченням і програмами.

Основні функції:

управління процесами (створення, планування, завершення);

управління пам’яттю;

робота з файловими системами;

комунікація між пристроями через драйвери;

система прав і безпеки.

Роль у DevOps:
DevOps інженер працює з ядром опосередковано через контейнери (Docker), віртуальні машини (KVM, Hyper-V) або системні сервіси (systemd).
Розуміння ядра потрібне для налаштування ресурсів і продуктивності, роботи з kernel modules, усунення проблем у продакшн середовищі (наприклад, high load або out of memory) та тюнінгу ядра для контейнеризації (cgroups, namespaces).
Приклад: при створенні Kubernetes-кластера DevOps повинен розуміти, як ядро керує мережевими інтерфейсами (iptables, netfilter, routing).

b) Libraries (Бібліотеки)

Бібліотеки — це колекції готових функцій, якими користуються системні та прикладні програми.

Основні функції:

містять реалізації стандартних функцій (glibc, OpenSSL, libcurl тощо);

надають інтерфейс до системних викликів (syscalls);

спрощують розробку та зменшують розмір програм.

Роль у DevOps:
DevOps повинен знати, які бібліотеки потрібні для роботи сервісів або контейнерів.
У Docker-образах бібліотеки — критичний елемент, оскільки неправильна версія може зламати застосунок.
Бібліотеки також є джерелом потенційних вразливостей, тому DevOps відповідає за їх оновлення та моніторинг (через trivy, grype, apt upgrade).
Приклад: якщо Python-програма не запускається в контейнері, DevOps перевіряє наявність потрібних системних бібліотек (libssl, libpq, libxml2 тощо).

c) System Utilities (Системні утиліти)

Системні утиліти — це набір інструментів командного рядка, які дозволяють адмініструвати систему та керувати її станом.

Основні приклади:

базові: ls, cp, mv, cat, grep, find, ps, top;

адміністративні: useradd, systemctl, journalctl, apt, ip;

DevOps-утиліти: ssh, scp, curl, tar, netstat, docker, kubectl.

Роль у DevOps:
Це основні інструменти щоденної роботи інженера.
Використовуються для автоматизації (через Bash-скрипти, Ansible, CI/CD пайплайни), моніторингу та діагностики систем.
Приклад: якщо сервіс падає в Kubernetes, DevOps застосовує утиліти kubectl logs, systemctl status, journalctl -xe, top для пошуку проблеми.

Висновок:
Kernel — контролює апаратні ресурси і процеси. DevOps використовує знання ядра для аналізу продуктивності та роботи з контейнерами.
Libraries — забезпечують стандартні функції та API. DevOps працює з ними при управлінні залежностями, безпекою і сумісністю.
System Utilities — дозволяють керувати системою і сервісами. DevOps використовує їх для автоматизації, CI/CD, моніторингу і діагностики.
