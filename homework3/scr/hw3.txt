HW3: Основи роботи Linux (DevOps контекст)

1. Етапи завантаження системи Linux

Процес завантаження (boot process) — це послідовність дій, за допомогою яких операційна система Linux переходить від стану “живлення ввімкнено” до готової для роботи системи з графічним чи консольним інтерфейсом.
Він складається з кількох основних етапів:

1. BIOS / UEFI
Після натискання кнопки живлення, комп’ютер запускає BIOS або UEFI.
Це мікропрограма, яка:
- перевіряє апаратне забезпечення (POST — Power On Self Test);
- шукає пристрій, з якого потрібно завантажити систему (HDD, SSD, USB);
- передає керування завантажувачу (bootloader).

2. Bootloader (наприклад GRUB)
Завантажувач відповідає за вибір ядра Linux і передавання йому керування.
Основні функції:
- показує меню вибору ОС (якщо їх кілька);
- завантажує ядро (vmlinuz) і початковий RAM-диск (initrd або initramfs).

3. Kernel (ядро Linux)
Ядро розпаковується в пам’ять, ініціалізує обладнання (CPU, пам’ять, диски, драйвери) і монтує кореневу файлову систему /.
Далі запускає перший процес — /sbin/init або systemd.

4. Init / Systemd
Цей процес керує всіма іншими процесами системи:
- запускає служби (networking, ssh, cron);
- монтує додаткові файлові системи;
- готує систему до роботи користувачів.

5. Login / Shell / Desktop
На цьому етапі користувач бачить консоль або графічний інтерфейс (GUI), і система готова до роботи.

Висновок:
Для DevOps важливо розуміти boot process, щоб вміти відновлювати систему після збоїв (наприклад, відновлення GRUB, заміна ядра, rescue mode тощо).


2. Як переглянути системні журнали

Системні журнали (logs) — це файли, у яких зберігається інформація про роботу ОС, сервісів, користувачів, помилки та безпеку.

Основні способи перегляду:

1. Через journalctl (якщо використовується systemd):
journalctl
- Всі логи системи.
Додатково:
journalctl -b           # тільки з поточного запуску (boot)
journalctl -xe          # помилки з поясненнями
journalctl -u ssh       # логи конкретного сервісу (наприклад, ssh)

2. Через файли в /var/log:
ls /var/log
Основні файли:
- /var/log/syslog — системні повідомлення
- /var/log/auth.log — авторизації, SSH
- /var/log/kern.log — повідомлення ядра
- /var/log/dpkg.log — дії менеджера пакетів
- /var/log/nginx/, /var/log/apache2/ — логи веб-серверів

Для перегляду:
cat /var/log/syslog
tail -n 50 /var/log/syslog
less /var/log/syslog

Для DevOps: аналіз логів — основа моніторингу, відлагодження CI/CD, роботи з Promtail, Loki, Fluentd, ELK.


3. -rw------- : опис дозволу та як додати прапорець виконання

-rw------- — це приклад файлових прав у Linux, які можна побачити командою:
ls -l

Розшифровка:
-rw-------
││││││││││
││││││││└── Інші користувачі (others): без прав
│││││││└─── Група (group): без прав
│││││└───── Власник (user): має право читати (r) і писати (w)
│└───────── Це звичайний файл (-)

Отже:
- r — read (читання)
- w — write (запис)
- x — execute (виконання)

Як додати прапорець виконання (x):
chmod +x file.sh
або для конкретного користувача:
chmod u+x file.sh

Тепер права будуть:
-rwx------
Файл стане виконуваним (скрипт або програма).

Для DevOps: це важливо при роботі зі скриптами CI/CD, shell automation, Docker ENTRYPOINT тощо.


4. Різниця між apt і dpkg

І apt, і dpkg — це інструменти для роботи з пакетами в Debian/Ubuntu, але на різних рівнях.

Критерій | dpkg | apt
----------|------|------
Рівень | Низькорівневий | Високорівневий
Призначення | Встановлення, видалення локальних .deb файлів | Керування пакетами з репозиторіїв
Залежності | Не встановлює автоматично залежності | Автоматично встановлює/оновлює залежності
Приклад використання | sudo dpkg -i package.deb | sudo apt install package
Джерело пакетів | Лише локальні файли | Репозиторії (/etc/apt/sources.list)
Типова роль у DevOps | Використовується у Dockerfile або при кастомному розгортанні | Використовується у CI/CD або для оновлень системи

Висновок:
dpkg — базовий “механізм”, що встановлює пакети.
apt — “розумний менеджер”, який використовує dpkg, але сам обробляє залежності й репозиторії.

